---
- name: Delete libvirt pool
  when: libvirt.pool.name is defined and
        ('rollback' in ansible_run_tags)
  tags:
    - rollback
  block:

    - name: Deleting libvirt pool
      become: true
      when: libvirt.pool.name != 'default' or
            (libvirt.pool.clean_mode.also_default is defined and
             libvirt.pool.clean_mode.also_default)
      ansible.builtin.shell: |-
        kcli delete pool {{libvirt.pool.name}} --yes
        {% if libvirt.pool.clean_mode.remove_files is defined and libvirt.pool.clean_mode.remove_files %}
        rm -fr {{libvirt.pool.path}}
        {% endif %}
      register: del_pool_ret
      changed_when: del_pool_ret.stdout != ''

- name: Create libvirt networks
  when: libvirt.pool.name is defined and
        libvirt.pool.path is defined
  block:

  - name: Determine if pool folder exists
    ansible.builtin.stat:
      path: "{{libvirt.pool.path}}"
    register: image_pool_folder

  - name: Create KCLI image pool
    become: true
    ansible.builtin.shell: |-
      kcli list pool | grep '{{libvirt.pool.name}}.*{{libvirt.pool.path | replace("~", "") }}' > /dev/null
      if [ $? -ne 0 ];then
        echo "Creating Libvirt default pool..."
        mkdir -pv {{libvirt.pool.path}}
        kcli create pool -p {{libvirt.pool.path}} {{libvirt.pool.name}}
      fi

  # $ ansible-galaxy collection install ansible.posix
  - name: Set ACL information to image pool folder
    become: true
    when: ansible_user_id != 'root'
    ansible.posix.acl:
      path: "{{libvirt.pool.path}}"
      entity: "{{item}}"
      etype: user
      permissions: rwx
      state: present
    loop:
      - "{{ansible_user_id}}"
      - qemu

  - name: Show KCLI image pool
    changed_when: false
    ansible.builtin.shell: |
      kcli list pools
      getfacl -e {{libvirt.pool.path}}
